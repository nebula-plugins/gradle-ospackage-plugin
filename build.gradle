/*
 * Copyright 2014-2019 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
plugins {
    id 'com.netflix.nebula.plugin-plugin' version '21.3.3'
    id 'java-library'
}

description 'Provides a task similar to Tar and Zip for constructing RPM and DEB package files.'

compileGroovy.groovyOptions.configurationScript = file('src/groovyCompile/groovycConfig.groovy')

contacts {
    'nebula-plugins-oss@netflix.com' {
        moniker 'Nebula Plugins Maintainers'
        github 'nebula-plugins'
    }
}

dependencyLock {
    includeTransitives = true
}

configurations.all {
    resolutionStrategy {
        force 'org.bouncycastle:bcpg-jdk15on:1.62'
    }
}

dependencies {
    implementation 'org.apache.commons:commons-lang3:3.9'
    api('org.redline-rpm:redline:1.2.10') {
        // Where logging goes is a runtime decision
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    }
    api('org.vafer:jdeb:1.10') {
        // Individual listing so that they translate into the pom file
        exclude group: 'org.apache.maven', module: 'maven-core'
        exclude group: 'org.apache.maven', module: 'maven-plugin-api'
        exclude group: 'org.apache.maven', module: 'maven-project'
        exclude group: 'org.apache.maven', module: 'maven-artifact'
        exclude group: 'org.codehaus.plexus', module: 'plexus-utils'
    }

    implementation 'com.bmuschko:gradle-docker-plugin:3.2.1'
    testImplementation 'com.github.stefanbirkner:system-rules:1.19.0'
}

def javaApiUrl = 'http://docs.oracle.com/javase/1.6.0/docs/api/'
def groovyApiUrl = 'http://groovy.codehaus.org/gapi/'

tasks.withType(Javadoc) {
    options.links(javaApiUrl, groovyApiUrl)
}

test {
    maxHeapSize = '384m'
}

gradlePlugin {
    plugins {
        ospackage {
            id = 'com.netflix.nebula.ospackage'
            displayName = 'Nebula OS Package'
            description = project.description
            implementationClass = 'com.netflix.gradle.plugins.packaging.SystemPackagingPlugin'
            tags.set(['nebula', 'rpm', 'centos', 'deb', 'debian'])
        }

        ospackageApplication {
            id = 'com.netflix.nebula.ospackage-application'
            displayName = 'Nebula OS Package Application Plugin'
            description = 'Packages output of application plugin into a debian or rpm'
            implementationClass = 'com.netflix.gradle.plugins.application.OspackageApplicationPlugin'
            tags.set(['nebula', 'os', 'package', 'rpm', 'deb', 'application'])
        }

        ospackageApplicationDaemon {
            id = 'com.netflix.nebula.ospackage-application-daemon'
            displayName = 'Nebula OS Package Application Daemon Plugin'
            description = 'Creates daemontools setup to run output from application plugin'
            implementationClass = 'com.netflix.gradle.plugins.application.OspackageApplicationDaemonPlugin'
            tags.set(['nebula', 'os', 'package', 'rpm', 'deb', 'application', 'daemon'])
        }

        ospackageApplicationSpring {
            id = 'com.netflix.nebula.ospackage-application-spring-boot'
            displayName = 'Nebula OS Package Spring Application Plugin'
            description = 'Packages output of application plugin into a debian or rpm'
            implementationClass = 'com.netflix.gradle.plugins.application.OspackageApplicationSpringBootPlugin'
            tags.set(['nebula', 'os', 'package', 'rpm', 'deb', 'application', 'spring'])
        }

        ospackageBase {
            id = 'com.netflix.nebula.ospackage-base'
            displayName = 'Nebula OS Package Base'
            description = 'Setup base publishing for OS packages'
            implementationClass = 'com.netflix.gradle.plugins.packaging.SystemPackagingBasePlugin'
            tags.set(['nebula', 'rpm', 'centos', 'deb', 'debian'])
        }

        ospackageDaemon {
            id = 'com.netflix.nebula.ospackage-daemon'
            displayName = 'Nebula OS Package Daemon Plugin'
            description = 'Create daemontools runner'
            implementationClass = 'com.netflix.gradle.plugins.daemon.OspackageDaemonPlugin'
            tags.set(['nebula', 'os', 'package', 'rpm', 'deb', 'daemon'])
        }

        ospackageDocker {
            id = 'com.netflix.nebula.ospackage-docker'
            displayName = 'Nebula OS Package Docker'
            description = 'Create docker images from ospackage block'
            implementationClass = 'com.netflix.gradle.plugins.docker.OsPackageDockerPlugin'
            tags.set(['nebula', 'docker'])
        }

        ospackageDockerBase {
            id = 'com.netflix.nebula.ospackage-docker-base'
            displayName = 'Nebula OS Package Docker Base'
            description = 'Setup base publishing for docker images'
            implementationClass = 'com.netflix.gradle.plugins.docker.OsPackageDockerBasePlugin'
            tags.set(['nebula', 'docker'])
        }

        deb {
            id = 'com.netflix.nebula.deb'
            displayName = 'Nebula Debian Packaging Plugin'
            description = 'Create debian system packages'
            implementationClass = 'com.netflix.gradle.plugins.deb.DebPlugin'
            tags.set(['nebula', 'deb', 'debian'])
        }

        rpm {
            id = 'com.netflix.nebula.rpm'
            displayName = 'Nebula RPM Packaging Plugin'
            description = 'Create RPM system packages'
            implementationClass = 'com.netflix.gradle.plugins.rpm.RpmPlugin'
            tags.set(['nebula', 'rpm', 'centos'])
        }
    }
}
